// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Enquiry {
  id          Int      @id @default(autoincrement())
  
  // Basic Information (exactly matching your form)
  status      String   @default("New") @map("status") // New, Sold, Finalised
  institutionName String? @map("institutionname")
  firstName   String   @map("firstname")
  lastName    String   @map("surname")
  
  // Contact Information
  email       String   @map("email")
  phone       String?  @map("phone")
  nationality String?  @map("nationality") // English, Chinese, Korean, Japanese, Indian, Other
  
  // Location Information
  state       String   @map("state") // Australian states and territories
  suburb      String?  @map("suburb")
  
  // Product Interest (stored as string to match old database)
  productInterest String? @map("interest") // Store as comma-separated string to match old DB
  
  // Source Information
  source         String?  @map("source") // Teacher, Google, Facebook, Instagram, LinkedIn, WeChat, YouTube, Steinway Website, Radio, Magazine/Newspaper, Recommended by a friend, Event Follow Up, Other
  eventSource    String?  @map("enquirysource") // Events - Steinway Gallery St Leonards, Events - Steinway Gallery Melbourne, Phone Enquiry, In-store enquiry, etc.
  
  // Comments and Additional Information
  comments       String?  @map("comment") // Other Comments from form
  others         String?  @map("others") // Additional field from old database
  
  // Staff and Rating Information (from form)
  submittedBy    String?  @map("calltakenby") // Enquiry Submitted By
  customerRating String?  @default("N/A") @map("classification") // N/A, Ready to buy, High Priority, After Sale Follow Up, Very interested but not ready to buy, Looking for information, Just browsing for now, Cold, Events
  
  // Email Preferences
  doNotEmail     Boolean  @default(false) @map("newsletter") // Do Not Email This Customer checkbox (inverted logic)
  
  // Follow-up System (additional fields used in follow-up form)
  followUpInfo   String?  @map("followupinfo")
  bestTimeToFollowUp DateTime? @map("fupdate")
  stepProgram    String?  @default("N/A") @map("stepprogram") // N/A, Interested, Not interested
  enquiryUpdatedBy String? @map("enqupdatedby") // Staff member who updated in follow-up
  salesManagerInvolved String? @default("No") @map("involving") // Yes/No
  salesManagerExplanation String? @map("notinvolvingreason")
  followUpNotes  String?  @map("fup")
  
  // Additional fields from old database
  inputDate      DateTime? @map("inputdate") // Legacy field
  lastUpdate     DateTime? @map("lastupdate")
  fupStatus      String?   @map("fupstatus")
  originalFupDate DateTime? @map("originalfupdate")
  
  // System Fields
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  importSource   String?  // Track if imported from old system
  originalId     String?  // Original ID from old system
  
  @@map("enquiries")
}

model Staff {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  email     String?  @unique
  role      String?
  isActive  Boolean  @default(true)
  
  // Additional staff fields
  phone     String?
  position  String?
  department String?
  startDate DateTime?
  endDate   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("staff")
}

model SystemSetting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_settings")
}

// For tracking data imports
model ImportLog {
  id          Int      @id @default(autoincrement())
  fileName    String
  recordsImported Int
  recordsSkipped  Int
  recordsErrored  Int
  status      String   // pending, completed, failed
  errorLog    String?
  importedBy  String?
  
  createdAt   DateTime @default(now())
  
  @@map("import_logs")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("staff") // admin, staff
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// Email Campaign Management and Analytics
model EmailCampaign {
  id            String   @id @default(cuid())
  name          String
  subject       String
  templateId    String
  templateName  String?
  htmlContent   String?  @db.Text
  textContent   String?  @db.Text
  
  // Campaign recipients
  recipientType String   // 'all', 'filtered', 'selected', 'custom'
  recipientCount Int     @default(0)
  sentCount     Int      @default(0)
  
  // Campaign status
  status        String   @default("draft") // 'draft', 'scheduled', 'sending', 'sent', 'paused'
  scheduledAt   DateTime?
  sentAt        DateTime?
  
  // Tracking and analytics
  opens         EmailOpen[]
  clicks        EmailClick[]
  bounces       EmailBounce[]
  
  // System fields
  createdBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("email_campaigns")
}

model EmailOpen {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  // Recipient information
  recipientId String?  // Can be null for custom email recipients
  recipientEmail String
  
  // Tracking details
  openedAt    DateTime @default(now())
  userAgent   String?
  ipAddress   String?
  source      String   @default("pixel") // 'pixel', 'webhook'
  
  // Prevent duplicate tracking (same recipient can open multiple times)
  @@unique([campaignId, recipientEmail, openedAt])
  @@map("email_opens")
}

model EmailClick {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  // Recipient information
  recipientId String?  // Can be null for custom email recipients  
  recipientEmail String
  
  // Click details
  targetUrl   String
  clickedAt   DateTime @default(now())
  userAgent   String?
  ipAddress   String?
  source      String   @default("redirect") // 'redirect', 'webhook'
  
  @@map("email_clicks")
}

model EmailBounce {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  // Recipient information
  recipientId String?  // Can be null for custom email recipients
  recipientEmail String
  
  // Bounce details
  bounceType  String   // 'hard', 'soft', 'complaint'
  bounceReason String?
  bouncedAt   DateTime @default(now())
  
  @@unique([campaignId, recipientEmail]) // One bounce record per recipient per campaign
  @@map("email_bounces")
} 