// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Enquiry {
  id          Int      @id @default(autoincrement())
  
  // Basic Information (exactly matching your form)
  status      String   @default("New") // New, Sold, Finalised
  institutionName String?
  firstName   String
  lastName    String
  
  // Contact Information
  email       String
  phone       String?
  nationality String?  // English, Chinese, Korean, Japanese, Indian, Other
  
  // Location Information
  state       String   // Australian states and territories
  suburb      String?
  
  // Product Interest (stored as JSON array of IDs)
  productInterest Json?   // ["steinway", "boston", "essex", "kawai", "yamaha", "usedpiano", "roland", "ritmuller", "ronisch", "kurzweil", "other"]
  
  // Source Information
  source         String?  // Teacher, Google, Facebook, Instagram, LinkedIn, WeChat, YouTube, Steinway Website, Radio, Magazine/Newspaper, Recommended by a friend, Event Follow Up, Other
  eventSource    String?  // Events - Steinway Gallery St Leonards, Events - Steinway Gallery Melbourne, Phone Enquiry, In-store enquiry, etc.
  
  // Comments and Additional Information
  comments       String?  // Other Comments from form
  
  // Staff and Rating Information (from form)
  submittedBy    String?  // Enquiry Submitted By
  customerRating String?  @default("N/A") // N/A, Ready to buy, High Priority, After Sale Follow Up, Very interested but not ready to buy, Looking for information, Just browsing for now, Cold, Events
  
  // Email Preferences
  doNotEmail     Boolean  @default(false) // Do Not Email This Customer checkbox
  
  // Follow-up System (additional fields used in follow-up form)
  followUpInfo   String?
  bestTimeToFollowUp DateTime?
  stepProgram    String?  @default("N/A") // N/A, Interested, Not interested
  enquiryUpdatedBy String? // Staff member who updated in follow-up
  salesManagerInvolved String? @default("No") // Yes/No
  salesManagerExplanation String?
  followUpNotes  String?
  
  // Backward compatibility fields
  surname        String?  // For data migration
  callTakenBy    String?  // Legacy field
  enquirySource  String?  // Legacy field
  newsletter     String?  // Legacy field
  inputDate      DateTime? // Legacy field
  
  // System Fields
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  importSource   String?  // Track if imported from old system
  originalId     String?  // Original ID from old system
  
  @@map("enquiries")
}

model Staff {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  email     String?  @unique
  role      String?
  isActive  Boolean  @default(true)
  
  // Additional staff fields
  phone     String?
  position  String?
  department String?
  startDate DateTime?
  endDate   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("staff")
}

model SystemSetting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_settings")
}

// For tracking data imports
model ImportLog {
  id          Int      @id @default(autoincrement())
  fileName    String
  recordsImported Int
  recordsSkipped  Int
  recordsErrored  Int
  status      String   // pending, completed, failed
  errorLog    String?
  importedBy  String?
  
  createdAt   DateTime @default(now())
  
  @@map("import_logs")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("staff") // admin, staff
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
} 